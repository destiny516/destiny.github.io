import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-0RY1_pBP.js";const t={},p=e(`<h1 id="_5、运算符-md" tabindex="-1"><a class="header-anchor" href="#_5、运算符-md"><span>5、运算符.md</span></a></h1><h3 id="经典真题" tabindex="-1"><a class="header-anchor" href="#经典真题"><span>经典真题</span></a></h3><ul><li>下面代码中，<em>a</em> 在什么情况下会执行输出语句打印 <em>1</em> ？</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><p><em>JavaScript</em> 共提供 <em>10</em> 个算术运算符，用来完成基本的算术运算。</p><ul><li><strong>加法运算符</strong>：<code>x + y</code></li><li><strong>减法运算符</strong>： <code>x - y</code></li><li><strong>乘法运算符</strong>： <code>x * y</code></li><li><strong>除法运算符</strong>：<code>x / y</code></li><li><strong>指数运算符</strong>：<code>x ** y</code></li><li><strong>余数运算符</strong>：<code>x % y</code></li><li><strong>自增运算符</strong>：<code>++x</code> 或者 <code>x++</code></li><li><strong>自减运算符</strong>：<code>--x</code> 或者 <code>x--</code></li><li><strong>数值运算符</strong>： <code>+x</code></li><li><strong>负数值运算符</strong>：<code>-x</code></li></ul><h4 id="加法运算符" tabindex="-1"><a class="header-anchor" href="#加法运算符"><span>加法运算符</span></a></h4><p>非数值（非字符串）会被转为数值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token boolean">true</span><span class="token operator">+</span><span class="token boolean">true</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token string">&#39;3&#39;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">5</span> <span class="token operator">=</span> <span class="token string">&#39;345&#39;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
	<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//[]</span>
	<span class="token function">toStrding</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//&#39;&#39;</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">&#39;[object Object]1&#39;</span>
	<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//{}</span>
	<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//&#39;[object Object]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个运算子是字符串，另一个运算子是非字符串，这时非字符串会转成字符串，再连接在一起。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;a&#39;</span> <span class="token comment">// &quot;1a&quot;</span>
<span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">&#39;a&#39;</span> <span class="token comment">// &quot;falsea&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。由于加法运算符存在重载，可能执行两种运算，使用的时候必须很小心。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;3&#39;</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token comment">// &quot;345&quot;</span>
<span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">&#39;5&#39;</span> <span class="token comment">// &quot;75&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="余数运算符" tabindex="-1"><a class="header-anchor" href="#余数运算符"><span>余数运算符%</span></a></h4><h4 id="自增自减" tabindex="-1"><a class="header-anchor" href="#自增自减"><span>自增自减 ++ --</span></a></h4><p>自增和自减运算符，是一元运算符，只需要一个运算子。它们的作用是将运算子首先转为数值，然后加上1或者减去1。它们会修改原始变量。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">++</span>x <span class="token comment">// 2</span>
x <span class="token comment">// 2</span>

<span class="token operator">--</span>x <span class="token comment">// 1</span>
x <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的变量<code>x</code>自增后，返回<code>2</code>，再进行自减，返回<code>1</code>。这两种情况都会使得，原始变量<code>x</code>的值发生改变。</p><p>运算之后，变量的值发生变化，这种效应叫做运算的副作用（side effect）。自增和自减运算符是仅有的两个具有副作用的运算符，其他运算符都不会改变变量的值。</p><p>自增和自减运算符有一个需要注意的地方，就是放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i  <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> j  <span class="token operator">=</span> <span class="token operator">++</span>i <span class="token operator">+</span> <span class="token number">5</span>
i<span class="token comment">//2</span>
j<span class="token comment">//7</span>

<span class="token keyword">var</span> i  <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> j  <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">5</span>
i<span class="token comment">//2</span>
j<span class="token comment">//6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

x<span class="token operator">++</span> <span class="token comment">// 1</span>
<span class="token operator">++</span>y <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数值运算符-负数值运算符" tabindex="-1"><a class="header-anchor" href="#数值运算符-负数值运算符"><span>数值运算符，负数值运算符</span></a></h4><p>数值运算符（<code>+</code>）同样使用加号，但它是一元运算符（只需要一个操作数），而加法运算符是二元运算符（需要两个操作数）。</p><p>数值运算符的作用在于可以将任何值转为数值（与<code>Number</code>函数的作用相同）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token boolean">true</span> <span class="token comment">// 1</span>
<span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 0</span>
<span class="token operator">-</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">//-0</span>
<span class="token comment">//[]转出来是0，是因为空数组在转字符串的时候是空字符串，字符串转为数字就是0</span>
<span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// NaN</span>
<span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//NaN</span>
<span class="token comment">//{}转字符串都是得到的是[object Object]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指数运算符" tabindex="-1"><a class="header-anchor" href="#指数运算符"><span>指数运算符</span></a></h4><p>指数运算符（<code>**</code>）完成指数运算，前一个运算子是底数，后一个运算子是指数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">4</span> <span class="token comment">// 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 相当于 2 ** (3 ** 2)</span>
<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span>
<span class="token comment">// 512</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h4><p>赋值运算符（Assignment Operators）用于给变量赋值。</p><p>最常见的赋值运算符，当然就是等号（<code>=</code>）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 将 1 赋值给变量 x</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 将变量 y 的值赋值给变量 x</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-比较运算符" tabindex="-1"><a class="header-anchor" href="#_2-比较运算符"><span>2. 比较运算符</span></a></h2><p>比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>2 &gt; 1 // true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码比较<code>2</code>是否大于<code>1</code>，返回<code>true</code>。</p><blockquote><p>注意，比较运算符可以比较各种类型的值，不仅仅是数值。</p></blockquote><p>JavaScript 一共提供了8个比较运算符。</p><ul><li><code>&gt;</code> 大于运算符</li><li><code>&lt;</code> 小于运算符</li><li><code>&lt;=</code> 小于或等于运算符</li><li><code>&gt;=</code> 大于或等于运算符</li><li><code>==</code> 相等运算符</li><li><code>===</code> 严格相等运算符</li><li><code>!=</code> 不相等运算符</li><li><code>!==</code> 严格不相等运算符</li></ul><p>这八个比较运算符分成两类：相等比较和非相等比较。两者的规则是不一样的，对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；否则，将两个运算子都转成数值，再比较数值的大小。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//NaN 在做比较的时候一定得到的是false</span>
<span class="token comment">//NaN 在做计算的时候得到的NaN</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="非相等运算符-字符串的比较" tabindex="-1"><a class="header-anchor" href="#非相等运算符-字符串的比较"><span>非相等运算符：字符串的比较</span></a></h4><p>字符串按照字典顺序进行比较。</p><h4 id="非相等运算符-非字符串的比较" tabindex="-1"><a class="header-anchor" href="#非相等运算符-非字符串的比较"><span>非相等运算符：非字符串的比较</span></a></h4><p>如果两个运算子之中，至少有一个不是字符串，需要分成以下两种情况。</p><p><strong>（1）原始类型值</strong></p><p>如果两个运算子都是原始类型的值，则是先转成数值再比较。 这里需要注意与<code>NaN</code>的比较。任何值（包括<code>NaN</code>本身）与<code>NaN</code>使用非相等运算符进行比较，返回的都是<code>false</code>。 <strong>（2）对象</strong></p><p>如果运算子是对象，会转为原始类型的值，再进行比较。</p><p>对象转换成原始类型的值，算法是先调用<code>valueOf</code>方法；如果返回的还是对象，再接着调用<code>toString</code>方法，详细解释参见《数据类型的转换》一章。</p><h4 id="严格相等运算符" tabindex="-1"><a class="header-anchor" href="#严格相等运算符"><span>严格相等运算符</span></a></h4><p><em>JavaScript</em> 提供两种相等运算符：<code>==</code>和<code>===</code>。</p><p>简单说，它们的区别是相等运算符（<code>==</code>）比较两个值是否相等，严格相等运算符（<code>===</code>）比较它们是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（<code>===</code>）直接返回<code>false</code>，而相等运算符（<code>==</code>）会将它们转换成同一个类型，再用严格相等运算符进行比较。 <strong>（1）不同类型的值</strong></p><p>如果两个值的类型不同，直接返回<code>false</code>。</p><p><strong>（2）同一类的原始类型值</strong></p><p>同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回<code>true</code>，值不同就返回<code>false</code>。</p><p><strong>（3）复合类型值</strong></p><p>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// false</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// false</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）undefined 和 null</strong></p><p><code>undefined</code>和<code>null</code>与自身严格相等。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="严格不相等运算符" tabindex="-1"><a class="header-anchor" href="#严格不相等运算符"><span>严格不相等运算符</span></a></h4><p>严格相等运算符有一个对应的“严格不相等运算符”（<code>!==</code>），它的算法就是先求严格相等运算符的结果，然后返回相反值。</p><h4 id="相等运算符" tabindex="-1"><a class="header-anchor" href="#相等运算符"><span>相等运算符</span></a></h4><p>相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样。</p><p><strong>（1）原始类型值</strong></p><p>原始类型的值会转换成数值再进行比较。</p><p><strong>（2）对象与原始类型值比较</strong></p><p>对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较。</p><p>具体来说，先调用对象的<code>valueOf()</code>方法，如果得到原始类型的值，就按照上一小节的规则，互相比较；如果得到的还是对象，则再调用<code>toString()</code>方法，得到字符串形式，再进行比较。 <strong>（3）undefined 和 null</strong></p><p><code>undefined</code>和<code>null</code>只有与自身比较，或者互相比较时，才会返回<code>true</code>；与其他类型的值比较时，结果都为<code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// true</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// true</span>

<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// false</span>

<span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// false</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）相等运算符的缺点</strong></p><p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span>             <span class="token comment">// true</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span>            <span class="token comment">// true</span>

<span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">true</span>           <span class="token comment">// false</span>
<span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">false</span>          <span class="token comment">// false</span>

<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&#39;false&#39;</span>    <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span>        <span class="token comment">// true</span>

<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>  <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span>       <span class="token comment">// false</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>   <span class="token comment">// true</span>

<span class="token string">&#39; \\t\\r\\n &#39;</span> <span class="token operator">==</span> <span class="token number">0</span>     <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这些表达式都不同于直觉，很容易出错。因此建议不要使用相等运算符（<code>==</code>），最好只使用严格相等运算符（<code>===</code>）。</p><h4 id="不相等运算符" tabindex="-1"><a class="header-anchor" href="#不相等运算符"><span>不相等运算符</span></a></h4><p>相等运算符有一个对应的“不相等运算符”（<code>!=</code>），它的算法就是先求相等运算符的结果，然后返回相反值。</p><h2 id="_3-布尔运算符-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_3-布尔运算符-逻辑运算符"><span>3. 布尔运算符（逻辑运算符）</span></a></h2><p>布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p><ul><li>取反运算符：<code>!</code></li><li>且（并）运算符：<code>&amp;&amp;</code></li><li>或运算符：<code>||</code></li><li>三元运算符：<code>?:</code></li></ul><h4 id="取反运算符" tabindex="-1"><a class="header-anchor" href="#取反运算符"><span>取反运算符（!）</span></a></h4><p>取反运算符是一个感叹号，用于将布尔值变为相反值，即<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code>。</p><p>对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为<code>true</code>，其他值都为<code>false</code>。</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>false</code></li><li><code>0</code></li><li><code>NaN</code></li><li>空字符串（<code>&#39;&#39;</code>）</li></ul><h4 id="且运算符" tabindex="-1"><a class="header-anchor" href="#且运算符"><span>且运算符（&amp;&amp;）</span></a></h4><p>且运算符（<code>&amp;&amp;</code>）往往用于多个表达式的求值。</p><p>它的运算规则是：如果第一个运算子的布尔值为<code>true</code>，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为<code>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p><h4 id="或运算符" tabindex="-1"><a class="header-anchor" href="#或运算符"><span>或运算符（||）</span></a></h4><p>或运算符（<code>||</code>）也用于多个表达式的求值。它的运算规则是：如果第一个运算子的布尔值为<code>true</code>，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为<code>false</code>，则返回第二个运算子的值。</p><h4 id="三元条件运算符" tabindex="-1"><a class="header-anchor" href="#三元条件运算符"><span>三元条件运算符（?:）</span></a></h4><p>三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为<code>true</code>，则返回第二个表达式的值，否则返回第三个表达式的值。</p><h2 id="_4-位运算符" tabindex="-1"><a class="header-anchor" href="#_4-位运算符"><span>4. 位运算符</span></a></h2><p>按位运算符是将操作数换算成 <em>32</em> 位的二进制整数，然后按每一位来进行运算。例如：</p><p><em>5</em> 的 <em>32</em> 位为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>00000000000000000000000000000101
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="按位非" tabindex="-1"><a class="header-anchor" href="#按位非"><span>按位非</span></a></h4><p>按位非运算符<code>~</code>会把数字转为32位二进制整数，然后反转每一位。所有的 1 变为 0，所有的 0 变为 1</p><p>~5 的 32 位为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>11111111111111111111111111111010  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>转换出来就为 -6</p><p>按位非，实质上是对操作数求负，然后减去1。</p><h4 id="按位与" tabindex="-1"><a class="header-anchor" href="#按位与"><span>按位与</span></a></h4><p>按位或运算符<code>&amp;</code>会把两个数字转为 32 位二进制整数，并对两个数的每一位执行按位与运算。按位与的规则如下表：</p><table><thead><tr><th>第一个数字</th><th>第二个数字</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="按位或" tabindex="-1"><a class="header-anchor" href="#按位或"><span>按位或</span></a></h4><p>按位或运算符<code>|</code>会把两个数字转为 32 位二进制整数，并对两个数的每一位执行按位或运算。按位或的规则如下表：</p><table><thead><tr><th>第一个数字</th><th>第二个数字</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="按位异或" tabindex="-1"><a class="header-anchor" href="#按位异或"><span>按位异或</span></a></h4><p>按位或运算符<code>^</code>会把两个数字转为 32 位二进制整数，并对两个数的每一位执行按位异或运算。运算规则为两位不同返回 1，两位相同返回 0，如下表：</p><table><thead><tr><th>第一个数字</th><th>第二个数字</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><h4 id="按位移位" tabindex="-1"><a class="header-anchor" href="#按位移位"><span>按位移位</span></a></h4><p>按位移位运算符<code>&lt;&lt;</code>和<code>&gt;&gt;</code>会将所有位向左或者向右移动指定的数量，实际上就是高效率地将数字乘以或者除以 2 的指定数的次方。</p><p><code>&lt;&lt;</code>：乘以 2 的指定数次方</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2 乘以 2 的 2 次方</p><p>00000010 转换为 00001000</p><p><code>&gt;&gt;</code>：除以 2 的指定数次方</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>16 除以 2 的 1 次方</p><p>00010000转换为00001000</p><h4 id="void-运算符" tabindex="-1"><a class="header-anchor" href="#void-运算符"><span><em>void</em> 运算符</span></a></h4><p><em>void</em> 运算符的作用是执行一个表达式，然后不返回任何值，或者说返回 <em>undefined</em>。</p><h4 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符"><span>逗号运算符</span></a></h4><p>逗号运算符用于对两个表达式求值，并返回后一个表达式的值。</p><h2 id="_6-运算顺序" tabindex="-1"><a class="header-anchor" href="#_6-运算顺序"><span>6. 运算顺序</span></a></h2><h4 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级"><span>优先级</span></a></h4><p><em>JavaScript</em> 各种运算符的优先级别（<em>Operator Precedence</em>）是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。</p><h4 id="圆括号的作用" tabindex="-1"><a class="header-anchor" href="#圆括号的作用"><span>圆括号的作用</span></a></h4><p>圆括号可以用来提高运算的优先级，因为它的优先级是最高的，即圆括号中的表达式会第一个运算。</p><h4 id="左结合和右结合" tabindex="-1"><a class="header-anchor" href="#左结合和右结合"><span>左结合和右结合</span></a></h4><p>对于优先级别相同的运算符，同时出现的时候，就会有计算顺序的问题。</p>`,136),o=[p];function c(l,d){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","5、运算符.html.vue"]]),m=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/5%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"5、运算符.md","lang":"zh-CN","frontmatter":{"star":true,"category":["JS基础"],"description":"5、运算符.md 经典真题 下面代码中，a 在什么情况下会执行输出语句打印 1 ？ 算数运算符 JavaScript 共提供 10 个算术运算符，用来完成基本的算术运算。 加法运算符：x + y 减法运算符： x - y 乘法运算符： x * y 除法运算符：x / y 指数运算符：x ** y 余数运算符：x % y 自增运算符：++x 或者 x++...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/5%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"ErWin的博客"}],["meta",{"property":"og:title","content":"5、运算符.md"}],["meta",{"property":"og:description","content":"5、运算符.md 经典真题 下面代码中，a 在什么情况下会执行输出语句打印 1 ？ 算数运算符 JavaScript 共提供 10 个算术运算符，用来完成基本的算术运算。 加法运算符：x + y 减法运算符： x - y 乘法运算符： x * y 除法运算符：x / y 指数运算符：x ** y 余数运算符：x % y 自增运算符：++x 或者 x++..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T07:11:45.000Z"}],["meta",{"property":"article:author","content":"Mr.ErWin"}],["meta",{"property":"article:modified_time","content":"2024-04-10T07:11:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5、运算符.md\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-10T07:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ErWin\\",\\"url\\":\\"https://gitee.com/destiny12327\\"}]}"]]},"headers":[{"level":3,"title":"经典真题","slug":"经典真题","link":"#经典真题","children":[]},{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":2,"title":"2. 比较运算符","slug":"_2-比较运算符","link":"#_2-比较运算符","children":[]},{"level":2,"title":"3. 布尔运算符（逻辑运算符）","slug":"_3-布尔运算符-逻辑运算符","link":"#_3-布尔运算符-逻辑运算符","children":[]},{"level":2,"title":"4. 位运算符","slug":"_4-位运算符","link":"#_4-位运算符","children":[]},{"level":2,"title":"6. 运算顺序","slug":"_6-运算顺序","link":"#_6-运算顺序","children":[]}],"git":{"createdTime":1712733105000,"updatedTime":1712733105000,"contributors":[{"name":"ma","email":"destiny0402@163.com","commits":1}]},"readingTime":{"minutes":10.82,"words":3247},"filePathRelative":"面试笔记/渡一前端/5、运算符.md","localizedDate":"2024年4月10日","excerpt":"\\n<h3>经典真题</h3>\\n<ul>\\n<li>下面代码中，<em>a</em> 在什么情况下会执行输出语句打印 <em>1</em> ？</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> a <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">?</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">&amp;&amp;</span> a <span class=\\"token operator\\">==</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">&amp;&amp;</span> a <span class=\\"token operator\\">==</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n \\tconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,m as data};
