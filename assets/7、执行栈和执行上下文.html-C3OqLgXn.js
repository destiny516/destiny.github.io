import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-0RY1_pBP.js";const t={},p=e(`<h1 id="_7、执行栈和执行上下文-md" tabindex="-1"><a class="header-anchor" href="#_7、执行栈和执行上下文-md"><span>7、执行栈和执行上下文.md</span></a></h1><h3 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h3><p><strong><em>JavaScript</em> 中执行环境</strong></p><ol><li>全局环境</li><li>函数环境</li><li><em>eval</em> 函数环境 （已不推荐使用）</li></ol><p>那么与之对应的执行上下文类型同样有 <em>3</em> 种：</p><ol><li>全局执行上下文</li><li>函数执行上下文</li><li><em>eval</em> 函数执行上下文</li></ol><p><em>JavaScript</em> 运行时首先会进入全局环境，对应会生成全局上下文。程序代码中基本都会存在函数，那么<strong>调用函数</strong>，<strong>就会</strong>进入函数执行环境，对应就会生成该函数的执行上下文。</p><p>由于代码中会声明多个函数，对应的函数执行上下文也会存在多个。在 <em>JavaScript</em> 中，通过栈的存取方式来管理执行上下文，我们可称其为执行栈，或函数调用栈（<em>Call Stack</em>）。</p><h3 id="栈数据结构" tabindex="-1"><a class="header-anchor" href="#栈数据结构"><span>栈数据结构</span></a></h3><p><strong>执行栈（函数调用栈）</strong></p><p>理解完栈的存取方式，我们接着分析 <em>JavaScript</em> 中如何通过栈来管理多个执行上下文。</p><p>程序执行进入一个执行环境时，它的执行上下文就会被创建，并被推入执行栈中（入栈）；程序执行完成时，它的执行上下文就会被销毁，并从栈顶被推出（出栈），控制权交由下一个执行上下文。</p><p>因为 <em>JavaScript</em> 在执行代码时最先进入全局环境，所以<strong>处于栈底的永远是全局环境的执行上下文</strong>。而处于<strong>栈顶的是当前正在执行函数的执行上下文</strong>。</p><p>当函数调用完成后，它就会从栈顶被推出，理想的情况下，闭包会阻止该操作，闭包可以参阅《闭包》章节。</p><p>而全局环境只有一个，对应的全局执行上下文也只有一个，只有当页面被关闭之后它才会从执行栈中被推出，否则一直存在于栈底。</p><p><strong>执行上下文的数量限制（堆栈溢出）</strong></p><p>执行上下文可存在多个，虽然没有明确的数量限制，但如果超出栈分配的空间，会造成堆栈溢出。常见于递归调用，没有终止条件造成死循环的场景。</p><h3 id="执行上下文生命周期" tabindex="-1"><a class="header-anchor" href="#执行上下文生命周期"><span>执行上下文生命周期</span></a></h3><p>执行上下文的生命周期有两个阶段：</p><ol><li>创建阶段（<strong>进入</strong>执行上下文）：函数被调用时，进入函数环境，为其创建一个执行上下文，此时进入创建阶段。</li><li>执行阶段（代码<strong>执行</strong>）：执行函数中代码时，此时执行上下文进入执行阶段。 <strong>创建阶段</strong></li></ol><p>创建阶段要做的事情主要如下：</p><ol><li><p>创建变量对象（<em>VO：variable object</em>）</p><ul><li><p>确定函数的形参（<strong>并赋值</strong>）</p></li><li><p>函数环境会初始化创建 <em>Arguments</em>对象（<strong>并赋值</strong>）</p></li><li><p>确定普通字面量形式的函数声明（<strong>并赋值</strong>）</p></li><li><p>变量声明，函数表达式声明（<strong>未赋值</strong>）</p></li></ul></li><li><p>确定 <em>this</em> 指向（<strong><em>this</em> 由调用者确定</strong>）</p></li><li><p>确定作用域（<strong>词法环境决定，哪里声明定义，就在哪里确定</strong>）</p></li></ol><p>这里有必要说一下变量对象。</p><p>当处于执行上下文的建立阶段时，我们可以将整个上下文环境看作是一个对象。该对象拥有 <em>3</em> 个属性，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>executionContextObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variableObject</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 变量对象，里面包含 Arguments 对象，形式参数，函数和局部变量</span>
    <span class="token literal-property property">scopeChain</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 作用域链，包含内部上下文所有变量对象的列表</span>
    <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 上下文中 this 的指向对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   
     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">privateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、创建上下文阶段</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// vo = {</span>
    <span class="token comment">//     i : 10,</span>
    <span class="token comment">//     arguments : {0 : 10, length : 1},</span>
    <span class="token comment">//     c : 指向 c 那个函数</span>
    <span class="token comment">//     a : undefined</span>
    <span class="token comment">//     b : undefined</span>
    <span class="token comment">// }</span>
    <span class="token comment">// this,</span>
    <span class="token comment">// scope</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、执行阶段</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token comment">//     i : 10,</span>
    <span class="token comment">//     arguments : {0 : 10, length : 1},</span>
    <span class="token comment">//     c : 指向 c 那个函数</span>
    <span class="token comment">//     a : undefined</span>
    <span class="token comment">//     b : undefined</span>
    <span class="token comment">// }</span>
a <span class="token operator">===</span><span class="token operator">&gt;</span> <span class="token string">&#39;hello&#39;</span>
<span class="token literal-property property">b</span><span class="token operator">:</span> privateB 函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),o=[p];function i(l,c){return s(),a("div",null,o)}const m=n(t,[["render",i],["__file","7、执行栈和执行上下文.html.vue"]]),u=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/7%E3%80%81%E6%89%A7%E8%A1%8C%E6%A0%88%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html","title":"7、执行栈和执行上下文.md","lang":"zh-CN","frontmatter":{"category":["JS基础"],"description":"7、执行栈和执行上下文.md 执行上下文 JavaScript 中执行环境 全局环境 函数环境 eval 函数环境 （已不推荐使用） 那么与之对应的执行上下文类型同样有 3 种： 全局执行上下文 函数执行上下文 eval 函数执行上下文 JavaScript 运行时首先会进入全局环境，对应会生成全局上下文。程序代码中基本都会存在函数，那么调用函数，就会...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/7%E3%80%81%E6%89%A7%E8%A1%8C%E6%A0%88%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html"}],["meta",{"property":"og:site_name","content":"ErWin的博客"}],["meta",{"property":"og:title","content":"7、执行栈和执行上下文.md"}],["meta",{"property":"og:description","content":"7、执行栈和执行上下文.md 执行上下文 JavaScript 中执行环境 全局环境 函数环境 eval 函数环境 （已不推荐使用） 那么与之对应的执行上下文类型同样有 3 种： 全局执行上下文 函数执行上下文 eval 函数执行上下文 JavaScript 运行时首先会进入全局环境，对应会生成全局上下文。程序代码中基本都会存在函数，那么调用函数，就会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T07:11:45.000Z"}],["meta",{"property":"article:author","content":"Mr.ErWin"}],["meta",{"property":"article:modified_time","content":"2024-04-10T07:11:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7、执行栈和执行上下文.md\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-10T07:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ErWin\\",\\"url\\":\\"https://gitee.com/destiny12327\\"}]}"]]},"headers":[{"level":3,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":3,"title":"栈数据结构","slug":"栈数据结构","link":"#栈数据结构","children":[]},{"level":3,"title":"执行上下文生命周期","slug":"执行上下文生命周期","link":"#执行上下文生命周期","children":[]}],"git":{"createdTime":1712733105000,"updatedTime":1712733105000,"contributors":[{"name":"ma","email":"destiny0402@163.com","commits":1}]},"readingTime":{"minutes":3.35,"words":1005},"filePathRelative":"面试笔记/渡一前端/7、执行栈和执行上下文.md","localizedDate":"2024年4月10日","excerpt":"\\n<h3>执行上下文</h3>\\n<p><strong><em>JavaScript</em> 中执行环境</strong></p>\\n<ol>\\n<li>全局环境</li>\\n<li>函数环境</li>\\n<li><em>eval</em> 函数环境 （已不推荐使用）</li>\\n</ol>\\n<p>那么与之对应的执行上下文类型同样有 <em>3</em> 种：</p>\\n<ol>\\n<li>全局执行上下文</li>\\n<li>函数执行上下文</li>\\n<li><em>eval</em> 函数执行上下文</li>\\n</ol>\\n<p><em>JavaScript</em> 运行时首先会进入全局环境，对应会生成全局上下文。程序代码中基本都会存在函数，那么<strong>调用函数</strong>，<strong>就会</strong>进入函数执行环境，对应就会生成该函数的执行上下文。</p>","autoDesc":true}');export{m as comp,u as data};
