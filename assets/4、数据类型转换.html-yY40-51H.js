import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-x8bEfOWx.js";const t={},p=e(`<h1 id="_4、数据类型转换-md" tabindex="-1"><a class="header-anchor" href="#_4、数据类型转换-md"><span>4、数据类型转换.md</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>JavaScript是一种动态类型语言，变量没有类型限制，可以随时赋予任意值</p><h2 id="强制转换-显示转换" tabindex="-1"><a class="header-anchor" href="#强制转换-显示转换"><span>强制转换（显示转换）</span></a></h2><p>主要指的是Number（） String() Boolean()</p><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number"><span>Number()</span></a></h3><p>适应Number() 函数，可以将类型的值转为数值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token comment">//123</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span><span class="token comment">//NaN</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123xxx&#39;</span><span class="token punctuation">)</span><span class="token comment">//NaN</span>
 <span class="token comment">//Nubmer与parseInte不一样，pareseIne尽可能的多转</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//1</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//0</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">//0</span>

<span class="token comment">//对于对象，参数是对象是，返回NaN ,除非是包含单个数值的数组</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//NaN</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象转为数值的转换逻辑-先valueof-后tostring-特例-date-是先tostring-后valueof" tabindex="-1"><a class="header-anchor" href="#对象转为数值的转换逻辑-先valueof-后tostring-特例-date-是先tostring-后valueof"><span>对象转为数值的转换逻辑：（先valueOf()后tostring）特例：Date()是先toString，后valueOf()</span></a></h4><ul><li>第一步，调用对象自身的<code>valueOf</code>方法。如果返回原始类型的值，则直接对该值使用<code>Number</code>函数，不再进行后续步骤。</li><li>第二步，如果<code>valueOf</code>方法返回的还是对象，则改为调用对象自身的<code>toString</code>方法。如果<code>toString</code>方法返回原始类型的值，则对该值使用<code>Number</code>函数，不再进行后续步骤。</li><li>第三步，如果<code>toString</code>方法返回的是对象，就报错。 <strong>valueOf() toString() 是任何对象都有的方法，因为这两个方法都是挂在Object.property</strong></li></ul><h4 id="valueof和tostring方法-都是可以自定义的。" tabindex="-1"><a class="header-anchor" href="#valueof和tostring方法-都是可以自定义的。"><span><code>valueOf</code>和<code>toString</code>方法，都是可以自定义的。</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 2</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 3</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// &quot;123&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// &quot;true&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// &quot;undefined&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// &quot;null&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-方法-object转换" tabindex="-1"><a class="header-anchor" href="#string-方法-object转换"><span>String()方法 Object转换</span></a></h4><p><code>String</code>方法背后的转换规则，与<code>Number</code>方法基本相同，只是互换了<code>valueOf</code>方法和<code>toString</code>方法的执行顺序。</p><ol><li>先调用对象自身的<code>toString</code>方法。如果返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</li><li>如果<code>toString</code>方法返回的是对象，再调用原对象的<code>valueOf</code>方法。如果<code>valueOf</code>方法返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</li><li>如果<code>valueOf</code>方法返回的是对象，就报错。</li></ol><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean"><span>Boolean()</span></a></h3><p>它的转换规则相对简单：除了以下五个值的转换结果为<code>false</code>，其他的值全部为<code>true</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动转换-隐式转换" tabindex="-1"><a class="header-anchor" href="#自动转换-隐式转换"><span>自动转换（隐式转换）</span></a></h2><p>自动转换是以强制类型转换为基础的</p><p>以下三种情况，JavaScript会自动转换数据类型，用户不可见。 1、不同类型的数据互相运算</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">123</span> <span class="token operator">+</span> <span class="token string">&#39;abc&#39;</span> <span class="token comment">//&#39;123abc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>2、对非布尔值类型的数据求布尔值
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>  <span class="token comment">// &quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>3、对非数组类型的值使用一元运算符+ -
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">}</span> <span class="token comment">// NaN</span>
<span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动转换为布尔值" tabindex="-1"><a class="header-anchor" href="#自动转换为布尔值"><span>自动转换为布尔值</span></a></h4><p>在预期为Boolean值的位置，就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用<code>Boolean()</code>函数。</p><p>因此除了以下五个值，其他都是自动转为<code>true</code>。</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>+0</code>或<code>-0</code></li><li><code>NaN</code></li><li><code>&#39;&#39;</code>（空字符串） 快速转换为Boolean值 1、expression?true:false 2、!!expression</li></ul><h4 id="自动转换为字符串" tabindex="-1"><a class="header-anchor" href="#自动转换为字符串"><span>自动转换为字符串</span></a></h4><p>字符串的自动转换，主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// &#39;51&#39;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token comment">// &quot;5true&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token comment">// &quot;5false&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// &quot;5[object Object]&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// &quot;5&quot;</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//[2]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//&#39;2&#39;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// &quot;5function (){}&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token keyword">undefined</span> <span class="token comment">// &quot;5undefined&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token keyword">null</span> <span class="token comment">// &quot;5null&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动转换为数值" tabindex="-1"><a class="header-anchor" href="#自动转换为数值"><span>自动转换为数值</span></a></h4>`,36),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","4、数据类型转换.html.vue"]]),k=JSON.parse(`{"path":"/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/4%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","title":"4、数据类型转换.md","lang":"zh-CN","frontmatter":{"category":["JS基础"],"description":"4、数据类型转换.md 介绍 JavaScript是一种动态类型语言，变量没有类型限制，可以随时赋予任意值 强制转换（显示转换） 主要指的是Number（） String() Boolean() Number() 适应Number() 函数，可以将类型的值转为数值 对象转为数值的转换逻辑：（先valueOf()后tostring）特例：Date()是先...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/4%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html"}],["meta",{"property":"og:site_name","content":"ErWin的博客"}],["meta",{"property":"og:title","content":"4、数据类型转换.md"}],["meta",{"property":"og:description","content":"4、数据类型转换.md 介绍 JavaScript是一种动态类型语言，变量没有类型限制，可以随时赋予任意值 强制转换（显示转换） 主要指的是Number（） String() Boolean() Number() 适应Number() 函数，可以将类型的值转为数值 对象转为数值的转换逻辑：（先valueOf()后tostring）特例：Date()是先..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T07:11:45.000Z"}],["meta",{"property":"article:author","content":"Mr.ErWin"}],["meta",{"property":"article:modified_time","content":"2024-04-10T07:11:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4、数据类型转换.md\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-10T07:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ErWin\\",\\"url\\":\\"https://gitee.com/destiny12327\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"强制转换（显示转换）","slug":"强制转换-显示转换","link":"#强制转换-显示转换","children":[{"level":3,"title":"Number()","slug":"number","link":"#number","children":[]},{"level":3,"title":"String()","slug":"string","link":"#string","children":[]},{"level":3,"title":"Boolean()","slug":"boolean","link":"#boolean","children":[]}]},{"level":2,"title":"自动转换（隐式转换）","slug":"自动转换-隐式转换","link":"#自动转换-隐式转换","children":[]}],"git":{"createdTime":1712733105000,"updatedTime":1712733105000,"contributors":[{"name":"ma","email":"destiny0402@163.com","commits":1}]},"readingTime":{"minutes":2.92,"words":876},"filePathRelative":"面试笔记/渡一前端/4、数据类型转换.md","localizedDate":"2024年4月10日","excerpt":"\\n<h2>介绍</h2>\\n<p>JavaScript是一种动态类型语言，变量没有类型限制，可以随时赋予任意值</p>\\n<h2>强制转换（显示转换）</h2>\\n<p>主要指的是Number（） String() Boolean()</p>\\n<h3>Number()</h3>\\n<p>适应Number() 函数，可以将类型的值转为数值</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code> <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'123'</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//123</span>\\n <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'xx'</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//NaN</span>\\n <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'123xxx'</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//NaN</span>\\n <span class=\\"token comment\\">//Nubmer与parseInte不一样，pareseIne尽可能的多转</span>\\n <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//1</span>\\n <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//0</span>\\n <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//0</span>\\n\\n<span class=\\"token comment\\">//对于对象，参数是对象是，返回NaN ,除非是包含单个数值的数组</span>\\n <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">a</span><span class=\\"token operator\\">:</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//NaN</span>\\n <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//5</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
