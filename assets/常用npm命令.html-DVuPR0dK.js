import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as d,c as i,b as e,d as n,e as t,a as c}from"./app-BTwBLxyO.js";const p={},s=e("h1",{id:"常用npm命令-md",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#常用npm命令-md"},[e("span",null,"常用npm命令.md")])],-1),r={href:"https://nodejs.cn/npm/cli/v9/",target:"_blank",rel:"noopener noreferrer"},m=c(`<h1 id="npm-cache" tabindex="-1"><a class="header-anchor" href="#npm-cache"><span>npm cache</span></a></h1><blockquote><p>操作包缓存</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm cache add &lt;package-spec&gt;
npm cache clean [&lt;key&gt;]
npm cache ls [&lt;name&gt;@&lt;version&gt;]
npm cache verify
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>-add: 将指定的包添加到本地缓存。此命令主要供 npm 内部使用，但它可以提供一种将数据显式添加到本地安装缓存的方法。</li></ul><ul><li>clean: 删除缓存文件夹中的所有数据。请注意，这通常是不必要的，因为 npm 的缓存是自我修复的并且可以抵抗数据损坏问。(如果要使用，后面加--force或-f)</li><li>verify: 验证缓存文件夹的内容，垃圾收集任何不需要的数据，并验证缓存索引和所有缓存数据的完整性。</li></ul><h1 id="npm-ci" tabindex="-1"><a class="header-anchor" href="#npm-ci"><span>npm ci</span></a></h1>`,6),u={href:"https://nodejs.cn/npm/cli/v9/commands/npm-ci/##c78ebdcd71c64edead90d2247d4a5a8c",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"npm install",-1),g=c(`<p>使用 <code>npm install</code> 和 <code>npm ci</code> 的主要区别是：</p><ul><li>项目必须有一个现有的 <code>package-lock.json</code> 或 <code>npm-shrinkwrap.json</code>。</li><li>如果包锁中的依赖项与 <code>package.json</code> 中的依赖项不匹配，<code>npm ci</code> 将退出并出错，而不是更新包锁。</li><li><code>npm ci</code> 一次只能安装整个项目：无法使用此命令添加单个依赖项。</li><li>如果 <code>node_modules</code> 已经存在，它将在 <code>npm ci</code> 开始安装之前自动删除。</li><li>它永远不会写入 <code>package.json</code> 或任何包锁：安装基本上是冻结的。</li></ul><h1 id="npm-doctor" tabindex="-1"><a class="header-anchor" href="#npm-doctor"><span>npm doctor</span></a></h1><blockquote><p>检查您的环境</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm doctor [ping] [registry] [versions] [environment] [permissions] [cache] 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>npm doctor</code> 运行一组检查以确保您的 npm 安装具有管理 JavaScript 包所需的内容。npm 主要是一个独立的工具，但它确实有一些必须满足的基本要求：</p><ul><li>Node.js 和 git 必须可由 npm 执行。</li><li>主 npm 注册表 <code>registry.npmjs.com</code> 或其他使用注册表 API 的服务可用。</li><li>npm 使用的目录 <code>node_modules</code>（本地和全局）存在并且可以由当前用户写入。</li><li>npm 缓存存在，并且其中的包 tarball 没有损坏。</li></ul><h1 id="npm-explore" tabindex="-1"><a class="header-anchor" href="#npm-explore"><span>npm explore</span></a></h1><blockquote><p>浏览已安装的包</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm explore &lt;pkg&gt; [ -- &lt;command&gt;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="npm-help-search" tabindex="-1"><a class="header-anchor" href="#npm-help-search"><span>npm help-search</span></a></h1><blockquote><p>获取有关 npm 的帮助</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm help-search &lt;text&gt; 在文档中查找属于
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="npm-init" tabindex="-1"><a class="header-anchor" href="#npm-init"><span>npm init</span></a></h1><blockquote><p>创建一个 package.json 文件</p></blockquote><h1 id="npm-install" tabindex="-1"><a class="header-anchor" href="#npm-install"><span>npm install</span></a></h1><blockquote><p>安装一个包</p></blockquote><p>此命令安装一个包和它所依赖的任何包。如果包有一个包锁，或者一个 npm 收缩封装文件，或者一个纱线锁文件，依赖项的安装将由它驱动，遵循以下优先顺序：</p><ul><li><code>npm-shrinkwrap.json</code></li><li><code>package-lock.json</code></li><li><code>yarn.lock</code></li></ul><p><strong>默认情况下，<code>npm install</code> 将任何指定的包保存到 <code>dependencies</code> 中。此外，您可以使用一些额外的标志来控制它们的保存位置和方式：</strong></p><ul><li><p><code>-D, --save-dev</code>：包将出现在您的 <code>devDependencies</code> 中。</p></li><li><p><code>npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</code>： 安装指定版本的包。如果版本尚未发布到注册表，这将失败。</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm install sax@0.1.1 
npm install @myorg/privatepackage@1.5.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-f</code> 或 <code>--force</code> 参数将强制 npm 获取远程资源，即使磁盘上存在本地副本。</li></ul><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><ul><li>save</li></ul><blockquote><p>默认值：<code>true</code>，除非在使用 <code>npm update</code> 时默认为 <code>false</code> 类型：布尔值</p></blockquote><p>将已安装的包作为依赖项保存到 <code>package.json</code> 文件中。 与 <code>npm rm</code> 命令一起使用时，从 <code>package.json</code> 中删除依赖关系。 如果设置为 <code>false</code>，也会阻止写入 <code>package-lock.json</code>。</p><ul><li>save-exact</li></ul><blockquote><p>默认值：false 类型：布尔值</p></blockquote><p>保存到 package.json 的依赖项将使用精确的版本进行配置，而不是使用 npm 的默认 semver 范围运算符。</p><ul><li>global</li></ul><blockquote><p>默认值：false 类型：布尔值</p></blockquote><p>在 &quot;global&quot; 模式下运行，以便将包安装到 <code>prefix</code> 文件夹而不是当前工作目录。</p><ul><li>包安装到 <code>{prefix}/lib/node_modules</code> 文件夹，而不是当前工作目录。</li><li>bin 文件链接到 <code>{prefix}/bin</code></li><li>手册页链接到 <code>{prefix}/share/man</code></li></ul><h1 id="npm-ls" tabindex="-1"><a class="header-anchor" href="#npm-ls"><span>npm ls</span></a></h1><blockquote><p>列出已安装的包</p></blockquote><h1 id="npm-uninstall" tabindex="-1"><a class="header-anchor" href="#npm-uninstall"><span>npm uninstall</span></a></h1><blockquote><p>删除一个包</p></blockquote><h1 id="npm-undate" tabindex="-1"><a class="header-anchor" href="#npm-undate"><span>npm undate</span></a></h1><blockquote><p>更新包 别名: up, upgrade, udpate</p></blockquote><h1 id="npm-view" tabindex="-1"><a class="header-anchor" href="#npm-view"><span>npm view</span></a></h1><blockquote><p>查看注册表信息</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm view connect //要从注册表中查看有关 \`connect\` 包的信息
npm view connect versions //要显示 \`connect\` 包版本历史
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,43);function b(v,x){const a=l("ExternalLinkIcon");return d(),i("div",null,[s,e("blockquote",null,[e("p",null,[n("本记录使用的是npm cli 9.x 版本，参考网址是"),e("a",r,[n("npm中文文档"),t(a)]),n("，只是总结了我工作中会用到或者在看了注释之后感觉会用到的部分命令，所以这个文档不是完整的。")])]),m,e("p",null,[n("此命令与 "),e("a",u,[h,t(a)]),n(" 类似，不同之处在于它旨在用于自动化环境，例如测试平台、持续集成和部署——或任何您希望确保对依赖项进行全新安装的情况。")]),g])}const _=o(p,[["render",b],["__file","常用npm命令.html.vue"]]),q=JSON.parse('{"path":"/%E6%9D%82%E8%AE%B0/%E5%B8%B8%E7%94%A8npm%E5%91%BD%E4%BB%A4.html","title":"常用npm命令.md","lang":"zh-CN","frontmatter":{"description":"常用npm命令.md 本记录使用的是npm cli 9.x 版本，参考网址是npm中文文档，只是总结了我工作中会用到或者在看了注释之后感觉会用到的部分命令，所以这个文档不是完整的。 npm cache 操作包缓存 -add: 将指定的包添加到本地缓存。此命令主要供 npm 内部使用，但它可以提供一种将数据显式添加到本地安装缓存的方法。 clean: 删...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E6%9D%82%E8%AE%B0/%E5%B8%B8%E7%94%A8npm%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"ErWin的博客"}],["meta",{"property":"og:title","content":"常用npm命令.md"}],["meta",{"property":"og:description","content":"常用npm命令.md 本记录使用的是npm cli 9.x 版本，参考网址是npm中文文档，只是总结了我工作中会用到或者在看了注释之后感觉会用到的部分命令，所以这个文档不是完整的。 npm cache 操作包缓存 -add: 将指定的包添加到本地缓存。此命令主要供 npm 内部使用，但它可以提供一种将数据显式添加到本地安装缓存的方法。 clean: 删..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T07:11:45.000Z"}],["meta",{"property":"article:author","content":"Mr.ErWin"}],["meta",{"property":"article:modified_time","content":"2024-04-10T07:11:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用npm命令.md\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-10T07:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ErWin\\",\\"url\\":\\"https://gitee.com/destiny12327\\"}]}"]]},"headers":[{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]}],"git":{"createdTime":1712733105000,"updatedTime":1712733105000,"contributors":[{"name":"ma","email":"destiny0402@163.com","commits":1}]},"readingTime":{"minutes":3.62,"words":1085},"filePathRelative":"杂记/常用npm命令.md","localizedDate":"2024年4月10日","excerpt":"\\n<blockquote>\\n<p>本记录使用的是npm cli 9.x 版本，参考网址是<a href=\\"https://nodejs.cn/npm/cli/v9/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">npm中文文档</a>，只是总结了我工作中会用到或者在看了注释之后感觉会用到的部分命令，所以这个文档不是完整的。</p>\\n</blockquote>\\n<h1>npm cache</h1>\\n<blockquote>\\n<p>操作包缓存</p>\\n</blockquote>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>npm cache add &lt;package-spec&gt;\\nnpm cache clean [&lt;key&gt;]\\nnpm cache ls [&lt;name&gt;@&lt;version&gt;]\\nnpm cache verify\\n</code></pre></div>","autoDesc":true}');export{_ as comp,q as data};
