import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-x8bEfOWx.js";const e={},p=t(`<h1 id="_3、包装类型-md" tabindex="-1"><a class="header-anchor" href="#_3、包装类型-md"><span>3、包装类型.md</span></a></h1><p>引用类型有自己内置的方法，也可以自定义其他方法用来操作数据，而基本数据类型不能像引用类型那样有自己的内置方法对数据进行更多的操作。</p><p>但是有 <em>3</em> 个是 <em>ES</em> 提供了对应的特殊引用类型（包装类型）<em>Boolean、Number、String</em>。</p><p>基本包装类型，和其他引用类型一样，拥有内置的方法可以对数据进行额外操作。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// string 基本类型</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其主要是因为在执行第二行代码时，后台会自动进行下面的步骤：</p><ol><li>自动创建 <em>String</em> 类型的一个实例（和基本类型的值不同，这个实例就是一个基本包装类型的对象）</li><li>调用实例（对象）上指定的方法</li><li>销毁这个实例</li></ol><p>用代码的方式解释就是如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//我们平常写程序的过程：</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// string 基本类型</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在执行到这一句的时候 后台会自动完成以下动作 ：</span>
<span class="token punctuation">(</span>
    <span class="token keyword">var</span> _str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 找到对应的包装对象类型，然后通过包装对象创建出一个和基本类型值相同的对象</span>
    <span class="token keyword">var</span> s2 <span class="token operator">=</span> _str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 然后这个对象就可以调用包装对象下的方法，并且返回结给 s2.</span>
    _str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//    3 之后这个临时创建的对象就被销毁了， str =null; </span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// h </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[p];function c(l,i){return s(),a("div",null,o)}const m=n(e,[["render",c],["__file","3、包装类型.html.vue"]]),d=JSON.parse(`{"path":"/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/3%E3%80%81%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B.html","title":"3、包装类型.md","lang":"zh-CN","frontmatter":{"category":["JS基础"],"description":"3、包装类型.md 引用类型有自己内置的方法，也可以自定义其他方法用来操作数据，而基本数据类型不能像引用类型那样有自己的内置方法对数据进行更多的操作。 但是有 3 个是 ES 提供了对应的特殊引用类型（包装类型）Boolean、Number、String。 基本包装类型，和其他引用类型一样，拥有内置的方法可以对数据进行额外操作。如下： 其主要是因为在执...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/3%E3%80%81%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"ErWin的博客"}],["meta",{"property":"og:title","content":"3、包装类型.md"}],["meta",{"property":"og:description","content":"3、包装类型.md 引用类型有自己内置的方法，也可以自定义其他方法用来操作数据，而基本数据类型不能像引用类型那样有自己的内置方法对数据进行更多的操作。 但是有 3 个是 ES 提供了对应的特殊引用类型（包装类型）Boolean、Number、String。 基本包装类型，和其他引用类型一样，拥有内置的方法可以对数据进行额外操作。如下： 其主要是因为在执..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T07:11:45.000Z"}],["meta",{"property":"article:author","content":"Mr.ErWin"}],["meta",{"property":"article:modified_time","content":"2024-04-10T07:11:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3、包装类型.md\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-10T07:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ErWin\\",\\"url\\":\\"https://gitee.com/destiny12327\\"}]}"]]},"headers":[],"git":{"createdTime":1712733105000,"updatedTime":1712733105000,"contributors":[{"name":"ma","email":"destiny0402@163.com","commits":1}]},"readingTime":{"minutes":1.33,"words":400},"filePathRelative":"面试笔记/渡一前端/3、包装类型.md","localizedDate":"2024年4月10日","excerpt":"\\n<p>引用类型有自己内置的方法，也可以自定义其他方法用来操作数据，而基本数据类型不能像引用类型那样有自己的内置方法对数据进行更多的操作。</p>\\n<p>但是有 <em>3</em> 个是 <em>ES</em> 提供了对应的特殊引用类型（包装类型）<em>Boolean、Number、String</em>。</p>\\n<p>基本包装类型，和其他引用类型一样，拥有内置的方法可以对数据进行额外操作。如下：</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// string 基本类型</span>\\n<span class=\\"token keyword\\">var</span> s2 <span class=\\"token operator\\">=</span> str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>s2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// h</span>\\n</code></pre></div>","autoDesc":true}`);export{m as comp,d as data};
