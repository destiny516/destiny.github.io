import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-D2HiJ1tS.js";const e={},p=t(`<h1 id="_16、严格模式-md" tabindex="-1"><a class="header-anchor" href="#_16、严格模式-md"><span>16、严格模式.md</span></a></h1><h2 id="什么是严格模式" tabindex="-1"><a class="header-anchor" href="#什么是严格模式"><span>什么是严格模式</span></a></h2><p>严格模式是从 <em>ES5</em> 开始新增的一种方式，是采用具有限制性 <em>JavaScript</em> 变体的一种方式，从而使代码隐式地脱离“马虎模式/稀松模式/懒散模式“（<em>sloppy</em>）模式。</p><p>设立&quot;严格模式&quot;的目的，主要有以下几个：</p><ul><li>消除 <em>Javascript</em> 语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的 <em>Javascript</em> 做好铺垫。</li></ul><p>在“严格模式下”，同样的代码，可能会有不一样的运行结果。一些在“正常模式”下可以运行的语句，在“严格模式”下将不能运行。</p><h2 id="开启严格模式" tabindex="-1"><a class="header-anchor" href="#开启严格模式"><span>开启严格模式</span></a></h2><p>进入“严格模式”的标志，是下面这行语句：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>老版本的浏览器会把它当作一行普通字符串，加以忽略。</p><p>“严格模式”有两种调用方法，适用于不同的场合。</p><p><strong>针对整个脚本文件</strong></p><p>将 <em>“use strict”</em> 放在脚本文件的第一行，则整个脚本都将以“严格模式”运行。</p><p>如果这行语句不在第一行，则无效，整个脚本以“正常模式”运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是严格模式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们第一行书写了 <em>“use strict”</em>，所以整个代码会进入到严格模式执行。</p><p><strong>针对整个脚本文件</strong></p><p>将 <em>“use strict”</em> 放在脚本文件的第一行，则整个脚本都将以“严格模式”运行。</p><p>如果这行语句不在第一行，则无效，整个脚本以“正常模式”运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是严格模式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们第一行书写了 <em>“use strict”</em>，所以整个代码会进入到严格模式执行。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是严格模式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是正常模式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码表示，一个网页中依次有两段 <em>Javascript</em> 代码。前一个 <em>script</em> 标签是严格模式，后一个不是。</p><p><strong>针对单个函数</strong></p><p>将 <em>“use strict”</em> 放在函数体的第一行，则整个函数以“严格模式”运行。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">&quot;这是严格模式。&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">notStrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;这是正常模式。&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="严格模式和普通模式区别" tabindex="-1"><a class="header-anchor" href="#严格模式和普通模式区别"><span>严格模式和普通模式区别</span></a></h2><p><strong>没有使用 <em>var</em> 声明的变量不能使用</strong></p><p>在普通模式下，我们可以使用一个未声明的变量，此时该变量会成为一个全局变量。但是这种使用方式在严格模式下会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span>
a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: a is not defined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除变量和不存在的属性会报错</strong></p><p>在普通模式下，删除变量或者不允许删除的属性虽然也会失败，但是是“静默失败”，也就是说虽然失败了，但是不会给出任何提示。这样其实会产生很多隐藏问题，也给程序员的调错带来了难度。</p><p>在严格模式下则会保存，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> i<span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Delete of an unqualified identifier in strict mode.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数中相同的形参名会报错</strong></p><p>在普通模式下，函数中两个形参名相同也不会报错，只不过后面的形参所接收到的值会覆盖前面的同名形参。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">b<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在严格模式下，相同的形参名会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span>
<span class="token comment">// SyntaxError: Duplicate parameter name not allowed in this context</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">b<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对象不能有重名的属性</strong></p><p>正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 语法错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>禁止八进制表示法</strong></p><p>正常模式下，整数的第一位如果是 <em>0</em>，表示这是八进制数，比如 <em>010</em> 等于十进制的 <em>8</em>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>严格模式禁止这种表示法，整数第一位为 <em>0</em>，将报错。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Octal literals are not allowed in strict mode.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数内部 <em>this</em> 值为 <em>undefined</em></strong></p><p>在普通模式下，函数中的 <em>this</em> 在以函数的形式被调用时，指向全局对象。而在严格模式中，得到的值为 <em>undefined</em>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),i=[p];function c(o,l){return s(),a("div",null,i)}const d=n(e,[["render",c],["__file","16、严格模式.html.vue"]]),m=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/16%E3%80%81%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html","title":"16、严格模式.md","lang":"zh-CN","frontmatter":{"category":["JS基础"],"description":"16、严格模式.md 什么是严格模式 严格模式是从 ES5 开始新增的一种方式，是采用具有限制性 JavaScript 变体的一种方式，从而使代码隐式地脱离“马虎模式/稀松模式/懒散模式“（sloppy）模式。 设立\\"严格模式\\"的目的，主要有以下几个： 消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为; 消除代码运行的一些不安...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/16%E3%80%81%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ErWin的博客"}],["meta",{"property":"og:title","content":"16、严格模式.md"}],["meta",{"property":"og:description","content":"16、严格模式.md 什么是严格模式 严格模式是从 ES5 开始新增的一种方式，是采用具有限制性 JavaScript 变体的一种方式，从而使代码隐式地脱离“马虎模式/稀松模式/懒散模式“（sloppy）模式。 设立\\"严格模式\\"的目的，主要有以下几个： 消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为; 消除代码运行的一些不安..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T07:11:45.000Z"}],["meta",{"property":"article:author","content":"Mr.ErWin"}],["meta",{"property":"article:modified_time","content":"2024-04-10T07:11:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"16、严格模式.md\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-10T07:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ErWin\\",\\"url\\":\\"https://gitee.com/destiny12327\\"}]}"]]},"headers":[{"level":2,"title":"什么是严格模式","slug":"什么是严格模式","link":"#什么是严格模式","children":[]},{"level":2,"title":"开启严格模式","slug":"开启严格模式","link":"#开启严格模式","children":[]},{"level":2,"title":"严格模式和普通模式区别","slug":"严格模式和普通模式区别","link":"#严格模式和普通模式区别","children":[]}],"git":{"createdTime":1712733105000,"updatedTime":1712733105000,"contributors":[{"name":"ma","email":"destiny0402@163.com","commits":1}]},"readingTime":{"minutes":3.98,"words":1194},"filePathRelative":"面试笔记/渡一前端/16、严格模式.md","localizedDate":"2024年4月10日","excerpt":"\\n<h2>什么是严格模式</h2>\\n<p>严格模式是从 <em>ES5</em> 开始新增的一种方式，是采用具有限制性 <em>JavaScript</em> 变体的一种方式，从而使代码隐式地脱离“马虎模式/稀松模式/懒散模式“（<em>sloppy</em>）模式。</p>\\n<p>设立\\"严格模式\\"的目的，主要有以下几个：</p>\\n<ul>\\n<li>消除 <em>Javascript</em> 语法的一些不合理、不严谨之处，减少一些怪异行为;</li>\\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\\n<li>提高编译器效率，增加运行速度；</li>\\n<li>为未来新版本的 <em>Javascript</em> 做好铺垫。</li>\\n</ul>","autoDesc":true}');export{d as comp,m as data};
