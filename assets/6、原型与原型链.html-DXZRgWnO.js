import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-0RY1_pBP.js";const t={},p=e(`<h1 id="_6、原型与原型链-md" tabindex="-1"><a class="header-anchor" href="#_6、原型与原型链-md"><span>6、原型与原型链.md</span></a></h1><h3 id="原型与原型链介绍" tabindex="-1"><a class="header-anchor" href="#原型与原型链介绍"><span>原型与原型链介绍</span></a></h3><p><em>JavaScript</em> 是一门基于原型的语言，<strong>对象的产生是通过原型对象而来的</strong>。</p><p><em>ES5</em> 中提供了 <em>Object.create</em> 方法，可以用来克隆对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">arms</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">legs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;walking&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> zhangsan <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>arms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>legs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
zhangsan<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// walking</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
zhangsan<span class="token punctuation">.</span>__protp__ 
<span class="token comment">//{</span>
<span class="token comment">//    arms: 2,</span>
<span class="token comment">//    legs: 2,</span>
<span class="token comment">//    walk() {</span>
<span class="token comment">//        console.log(&#39;walking&#39;);</span>
<span class="token comment">//    }</span>
<span class="token comment">//}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Object.create 方法第一个参数是原型对象</span>
<span class="token comment">// Object.create 方法接收第二个参数：对象</span>
<span class="token comment">// 该对象里面可以设置多个键值对</span>
<span class="token comment">// 每个键就是新对象的属性，所对应的值是一个属性描述符</span>
<span class="token comment">// var zhangsan = Object.create(person,{</span>
<span class="token comment">//     name : {</span>
<span class="token comment">//         value : &quot;zhangsan&quot;,</span>
<span class="token comment">//         enumerable : true</span>
<span class="token comment">//     },    </span>
<span class="token comment">//     age : {</span>
<span class="token comment">//         value : 18,</span>
<span class="token comment">//         enumerable : true  </span>
<span class="token comment">//     }</span>
<span class="token comment">// });</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// var zhangxiaosan = Object.create(zhangsan, {</span>
<span class="token comment">//     name : {</span>
<span class="token comment">//         value : &quot;zhangxiaosan&quot;,</span>
<span class="token comment">//         enumerable : true</span>
<span class="token comment">//     },</span>
<span class="token comment">//     born : {</span>
<span class="token comment">//         value : &quot;beijing&quot;,</span>
<span class="token comment">//         enumerable: true</span>
<span class="token comment">//     }</span>
<span class="token comment">// })</span>

<span class="token comment">// console.log(zhangxiaosan.__proto__ === zhangsan);</span>
<span class="token comment">// console.log(zhangxiaosan.__proto__.__proto__ === person);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>// 总结，当查找一个对象的属性的时候，如果该对象上面没有这个属性， // 则会去该对象上面的原型对象上面进行查找</p><h4 id="通过构造函数来模拟类的形式。" tabindex="-1"><a class="header-anchor" href="#通过构造函数来模拟类的形式。"><span>通过构造函数来模拟类的形式。</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function Computer(name, price) {
    // 属性写在类里面 
    this.name = name;
    this.price = price;
}
// 方法挂在原型对象上面
Computer.prototype.showSth = function () {
    console.log(\`这是一台\${this.name}电脑\`);
}

const apple = new Computer(&quot;苹果&quot;, 12000);
console.log(apple.name); // 苹果
console.log(apple.price); // 12000
apple.showSth(); // 这是一台苹果电脑
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>虽然模拟出了面向对象的方式创建对象，但是本质还是基于原型创建的</em></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>apple<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Computer</span><span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><em>JavaScript</em> 中每个对象都有一个原型对象。可以通过 __<em>proto</em>__ 属性来访问到对象的原型对象。</li><li>构造函数的 <em>prototype</em> 属性指向一个对象，这个对象是该构造函数实例化出来的对象的原型对象。</li><li>原型对象的 <em>constructor</em> 属性也指向其构造函数。</li><li>实例对象的 <em>constructor</em> 属性是从它的原型对象上面访问到。</li></ul>`,13),o=[p];function c(l,i){return s(),a("div",null,o)}const m=n(t,[["render",c],["__file","6、原型与原型链.html.vue"]]),d=JSON.parse(`{"path":"/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/6%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html","title":"6、原型与原型链.md","lang":"zh-CN","frontmatter":{"category":["JS基础"],"description":"6、原型与原型链.md 原型与原型链介绍 JavaScript 是一门基于原型的语言，对象的产生是通过原型对象而来的。 ES5 中提供了 Object.create 方法，可以用来克隆对象。 // 总结，当查找一个对象的属性的时候，如果该对象上面没有这个属性， // 则会去该对象上面的原型对象上面进行查找 通过构造函数来模拟类的形式。 虽然模拟出了面向...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E6%B8%A1%E4%B8%80%E5%89%8D%E7%AB%AF/6%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html"}],["meta",{"property":"og:site_name","content":"ErWin的博客"}],["meta",{"property":"og:title","content":"6、原型与原型链.md"}],["meta",{"property":"og:description","content":"6、原型与原型链.md 原型与原型链介绍 JavaScript 是一门基于原型的语言，对象的产生是通过原型对象而来的。 ES5 中提供了 Object.create 方法，可以用来克隆对象。 // 总结，当查找一个对象的属性的时候，如果该对象上面没有这个属性， // 则会去该对象上面的原型对象上面进行查找 通过构造函数来模拟类的形式。 虽然模拟出了面向..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T07:11:45.000Z"}],["meta",{"property":"article:author","content":"Mr.ErWin"}],["meta",{"property":"article:modified_time","content":"2024-04-10T07:11:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6、原型与原型链.md\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-10T07:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ErWin\\",\\"url\\":\\"https://gitee.com/destiny12327\\"}]}"]]},"headers":[{"level":3,"title":"原型与原型链介绍","slug":"原型与原型链介绍","link":"#原型与原型链介绍","children":[]}],"git":{"createdTime":1712733105000,"updatedTime":1712733105000,"contributors":[{"name":"ma","email":"destiny0402@163.com","commits":1}]},"readingTime":{"minutes":1.66,"words":498},"filePathRelative":"面试笔记/渡一前端/6、原型与原型链.md","localizedDate":"2024年4月10日","excerpt":"\\n<h3>原型与原型链介绍</h3>\\n<p><em>JavaScript</em> 是一门基于原型的语言，<strong>对象的产生是通过原型对象而来的</strong>。</p>\\n<p><em>ES5</em> 中提供了 <em>Object.create</em> 方法，可以用来克隆对象。</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> person <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">arms</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">legs</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">walk</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'walking'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">const</span> zhangsan <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>zhangsan<span class=\\"token punctuation\\">.</span>arms<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 2</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>zhangsan<span class=\\"token punctuation\\">.</span>legs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 2</span>\\nzhangsan<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">walk</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// walking</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>zhangsan<span class=\\"token punctuation\\">.</span>__proto__ <span class=\\"token operator\\">===</span> person<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\nzhangsan<span class=\\"token punctuation\\">.</span>__protp__ \\n<span class=\\"token comment\\">//{</span>\\n<span class=\\"token comment\\">//    arms: 2,</span>\\n<span class=\\"token comment\\">//    legs: 2,</span>\\n<span class=\\"token comment\\">//    walk() {</span>\\n<span class=\\"token comment\\">//        console.log('walking');</span>\\n<span class=\\"token comment\\">//    }</span>\\n<span class=\\"token comment\\">//}</span>\\n</code></pre></div>","autoDesc":true}`);export{m as comp,d as data};
