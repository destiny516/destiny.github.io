import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-DnLnUru6.js";const t={},i=e(`<h1 id="哲玄前端记录" tabindex="-1"><a class="header-anchor" href="#哲玄前端记录"><span>哲玄前端记录</span></a></h1><h5 id="实现一个sleep函数" tabindex="-1"><a class="header-anchor" href="#实现一个sleep函数"><span>实现一个sleep函数</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const sleep = async function(time){
return new Promise(resolve =&gt;{
setTimeout (()=&gt;{
resolve()
},time);
});
};

(async function(){
console.log(1);
await sleep(1000);
console.log(2);
})();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="两个接口相互调用-第二个接口使用第一个接口的返回值" tabindex="-1"><a class="header-anchor" href="#两个接口相互调用-第二个接口使用第一个接口的返回值"><span>两个接口相互调用，第二个接口使用第一个接口的返回值</span></a></h5><p>两个方案</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const a = await request1()

const b = await request2()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const a  =request1().then(
request2().then()
)//推荐 第一种会阻塞整个页面的刷新，第二种不会
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基础数据类型和引用类型 [[2、值和引用]] [[js 基本数据类型与引用数据类型]]]]</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let a = {key:1}
let c = a ;
a = {}
console.log(c)//{key:1}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let a = {key:1}
let c = a ;
a.key = 2
console.log(c)//{key:2}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="post-get的区别" tabindex="-1"><a class="header-anchor" href="#post-get的区别"><span>post /get的区别</span></a></h4><ul><li>get 1、参数可以放url，也可以放在body 2、参数大小没有限制 3、可调起浏览器缓存</li><li>post 1、参数可以做url，也可以放body 2、参数大小没有限制</li></ul><h4 id="宏任务微任务" tabindex="-1"><a class="header-anchor" href="#宏任务微任务"><span>宏任务微任务</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">relove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">relove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">arg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        consogle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    consogle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输出：3，7，4，1，2，5，Promise{1}

宏任务=[];
微任务=[];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),p=[i];function o(c,l){return s(),a("div",null,p)}const d=n(t,[["render",o],["__file","哲玄前端记录.html.vue"]]),v=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E5%93%B2%E7%8E%84%E5%89%8D%E7%AB%AF%E8%AE%B0%E5%BD%95.html","title":"哲玄前端记录","lang":"zh-CN","frontmatter":{"category":["面试"],"description":"哲玄前端记录 实现一个sleep函数 两个接口相互调用，第二个接口使用第一个接口的返回值 两个方案 基础数据类型和引用类型 [[2、值和引用]] [[js 基本数据类型与引用数据类型]]]] post /get的区别 get 1、参数可以放url，也可以放在body 2、参数大小没有限制 3、可调起浏览器缓存 post 1、参数可以做url，也可以放b...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E5%93%B2%E7%8E%84%E5%89%8D%E7%AB%AF%E8%AE%B0%E5%BD%95.html"}],["meta",{"property":"og:site_name","content":"ErWin的博客"}],["meta",{"property":"og:title","content":"哲玄前端记录"}],["meta",{"property":"og:description","content":"哲玄前端记录 实现一个sleep函数 两个接口相互调用，第二个接口使用第一个接口的返回值 两个方案 基础数据类型和引用类型 [[2、值和引用]] [[js 基本数据类型与引用数据类型]]]] post /get的区别 get 1、参数可以放url，也可以放在body 2、参数大小没有限制 3、可调起浏览器缓存 post 1、参数可以做url，也可以放b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T07:11:45.000Z"}],["meta",{"property":"article:author","content":"Mr.ErWin"}],["meta",{"property":"article:modified_time","content":"2024-04-10T07:11:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"哲玄前端记录\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-10T07:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ErWin\\",\\"url\\":\\"https://gitee.com/destiny12327\\"}]}"]]},"headers":[],"git":{"createdTime":1712733105000,"updatedTime":1712733105000,"contributors":[{"name":"ma","email":"destiny0402@163.com","commits":1}]},"readingTime":{"minutes":0.91,"words":274},"filePathRelative":"面试笔记/哲玄前端记录.md","localizedDate":"2024年4月10日","excerpt":"\\n<h5>实现一个sleep函数</h5>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>const sleep = async function(time){\\nreturn new Promise(resolve =&gt;{\\nsetTimeout (()=&gt;{\\nresolve()\\n},time);\\n});\\n};\\n\\n(async function(){\\nconsole.log(1);\\nawait sleep(1000);\\nconsole.log(2);\\n})();\\n</code></pre></div>","autoDesc":true}');export{d as comp,v as data};
